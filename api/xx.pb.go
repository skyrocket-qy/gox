// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: xx.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                                  // String type
	Age               int32             `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`                                                                                                   // 32-bit integer
	Height            int64             `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`                                                                                             // 64-bit integer
	Weight            uint32            `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`                                                                                             // Unsigned 32-bit integer
	NetWorth          uint64            `protobuf:"varint,5,opt,name=net_worth,json=netWorth,proto3" json:"net_worth,omitempty"`                                                                         // Unsigned 64-bit integer
	Temperature       int32             `protobuf:"zigzag32,6,opt,name=temperature,proto3" json:"temperature,omitempty"`                                                                                 // Signed 32-bit integer (uses ZigZag encoding)
	Distance          int64             `protobuf:"zigzag64,7,opt,name=distance,proto3" json:"distance,omitempty"`                                                                                       // Signed 64-bit integer (uses ZigZag encoding)
	FixedSalary       uint32            `protobuf:"fixed32,8,opt,name=fixed_salary,json=fixedSalary,proto3" json:"fixed_salary,omitempty"`                                                               // Fixed 32-bit integer
	FixedAssets       uint64            `protobuf:"fixed64,9,opt,name=fixed_assets,json=fixedAssets,proto3" json:"fixed_assets,omitempty"`                                                               // Fixed 64-bit integer
	SFixedBonus       int32             `protobuf:"fixed32,10,opt,name=s_fixed_bonus,json=sFixedBonus,proto3" json:"s_fixed_bonus,omitempty"`                                                            // Signed fixed 32-bit integer
	SFixedLiabilities int64             `protobuf:"fixed64,11,opt,name=s_fixed_liabilities,json=sFixedLiabilities,proto3" json:"s_fixed_liabilities,omitempty"`                                          // Signed fixed 64-bit integer
	IsEmployed        bool              `protobuf:"varint,12,opt,name=is_employed,json=isEmployed,proto3" json:"is_employed,omitempty"`                                                                  // Boolean type
	Gpa               float32           `protobuf:"fixed32,13,opt,name=gpa,proto3" json:"gpa,omitempty"`                                                                                                 // 32-bit floating point
	Accuracy          float64           `protobuf:"fixed64,14,opt,name=accuracy,proto3" json:"accuracy,omitempty"`                                                                                       // 64-bit floating point
	ProfilePicture    []byte            `protobuf:"bytes,15,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`                                                       // Byte array
	Hobbies           []string          `protobuf:"bytes,16,rep,name=hobbies,proto3" json:"hobbies,omitempty"`                                                                                           // Repeated string type
	Contacts          map[string]string `protobuf:"bytes,17,rep,name=contacts,proto3" json:"contacts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Map type with string keys and values
	// Types that are assignable to EmploymentStatus:
	//
	//	*Person_JobTitle
	//	*Person_Retired
	EmploymentStatus isPerson_EmploymentStatus `protobuf_oneof:"employment_status"`
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{0}
}

func (x *Person) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Person) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *Person) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Person) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Person) GetNetWorth() uint64 {
	if x != nil {
		return x.NetWorth
	}
	return 0
}

func (x *Person) GetTemperature() int32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *Person) GetDistance() int64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Person) GetFixedSalary() uint32 {
	if x != nil {
		return x.FixedSalary
	}
	return 0
}

func (x *Person) GetFixedAssets() uint64 {
	if x != nil {
		return x.FixedAssets
	}
	return 0
}

func (x *Person) GetSFixedBonus() int32 {
	if x != nil {
		return x.SFixedBonus
	}
	return 0
}

func (x *Person) GetSFixedLiabilities() int64 {
	if x != nil {
		return x.SFixedLiabilities
	}
	return 0
}

func (x *Person) GetIsEmployed() bool {
	if x != nil {
		return x.IsEmployed
	}
	return false
}

func (x *Person) GetGpa() float32 {
	if x != nil {
		return x.Gpa
	}
	return 0
}

func (x *Person) GetAccuracy() float64 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

func (x *Person) GetProfilePicture() []byte {
	if x != nil {
		return x.ProfilePicture
	}
	return nil
}

func (x *Person) GetHobbies() []string {
	if x != nil {
		return x.Hobbies
	}
	return nil
}

func (x *Person) GetContacts() map[string]string {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (m *Person) GetEmploymentStatus() isPerson_EmploymentStatus {
	if m != nil {
		return m.EmploymentStatus
	}
	return nil
}

func (x *Person) GetJobTitle() string {
	if x, ok := x.GetEmploymentStatus().(*Person_JobTitle); ok {
		return x.JobTitle
	}
	return ""
}

func (x *Person) GetRetired() bool {
	if x, ok := x.GetEmploymentStatus().(*Person_Retired); ok {
		return x.Retired
	}
	return false
}

type isPerson_EmploymentStatus interface {
	isPerson_EmploymentStatus()
}

type Person_JobTitle struct {
	JobTitle string `protobuf:"bytes,18,opt,name=job_title,json=jobTitle,proto3,oneof"`
}

type Person_Retired struct {
	Retired bool `protobuf:"varint,19,opt,name=retired,proto3,oneof"`
}

func (*Person_JobTitle) isPerson_EmploymentStatus() {}

func (*Person_Retired) isPerson_EmploymentStatus() {}

var File_xx_proto protoreflect.FileDescriptor

var file_xx_proto_rawDesc = []byte{
	0x0a, 0x08, 0x78, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x61, 0x69, 0x6e,
	0x22, 0xaa, 0x05, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0b, 0x73, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x5f, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x10, 0x52, 0x11, 0x73, 0x46, 0x69, 0x78, 0x65, 0x64, 0x4c, 0x69, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x61, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x67, 0x70, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x68, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x68, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x69, 0x72, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x74, 0x69, 0x72, 0x65, 0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x5a,
	0x05, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_xx_proto_rawDescOnce sync.Once
	file_xx_proto_rawDescData = file_xx_proto_rawDesc
)

func file_xx_proto_rawDescGZIP() []byte {
	file_xx_proto_rawDescOnce.Do(func() {
		file_xx_proto_rawDescData = protoimpl.X.CompressGZIP(file_xx_proto_rawDescData)
	})
	return file_xx_proto_rawDescData
}

var file_xx_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_xx_proto_goTypes = []any{
	(*Person)(nil), // 0: main.Person
	nil,            // 1: main.Person.ContactsEntry
}
var file_xx_proto_depIdxs = []int32{
	1, // 0: main.Person.contacts:type_name -> main.Person.ContactsEntry
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_xx_proto_init() }
func file_xx_proto_init() {
	if File_xx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_xx_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_xx_proto_msgTypes[0].OneofWrappers = []any{
		(*Person_JobTitle)(nil),
		(*Person_Retired)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_xx_proto_goTypes,
		DependencyIndexes: file_xx_proto_depIdxs,
		MessageInfos:      file_xx_proto_msgTypes,
	}.Build()
	File_xx_proto = out.File
	file_xx_proto_rawDesc = nil
	file_xx_proto_goTypes = nil
	file_xx_proto_depIdxs = nil
}
